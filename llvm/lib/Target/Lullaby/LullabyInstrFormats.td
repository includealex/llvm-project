//===- LullabyInstrFormats.td - Lullaby Instruction Formats *- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
//
//  These instruction format definitions are structured to match the
//  description in the Lullaby User-Level ISA specification as closely as
//  possible. For instance, the specification describes instructions with the
//  MSB (31st bit) on the left and the LSB (0th bit) on the right. This is
//  reflected in the order of parameters to each instruction class.
//
//  One area of divergence is in the description of immediates. The
//  specification describes immediate encoding in terms of bit-slicing
//  operations on the logical value represented. The immediate argument to
//  these instruction formats instead represents the bit sequence that will be
//  inserted into the instruction. e.g. although JAL's immediate is logically
//  a 21-bit value (where the LSB is always zero), we describe it as an imm20
//  to match how it is encoded.
//
//===----------------------------------------------------------------------===//


// Similar to RISCV:
// Format specifies the encoding used by the instruction. This is used by
// LullabyMCCodeEmitter to determine which form of fixup to use. These
// definitions must be kept in-sync with LullabyBaseInfo.h.
class InstFormat<bits<5> val> {
  bits<5> Value = val;
}
def InstFormatPseudo : InstFormat<0>;
def InstFormatR      : InstFormat<1>;
def InstFormatI      : InstFormat<3>;
def InstFormatS      : InstFormat<4>;
def InstFormatB      : InstFormat<5>;
def InstFormatU      : InstFormat<6>;
def InstFormatJ      : InstFormat<7>;

// Similar to RISCV:

// The following opcode names match those given in Table 19.1 in the
// RISC-V User-level ISA specification ("RISC-V base opcode map").
class LullabyOpcode<string name, bits<7> val> {
  string Name = name;
  bits<7> Value = val;
}

def LullabyOpcodesList : GenericTable {
  let FilterClass = "LullabyOpcode";
  let Fields = [
    "Name", "Value"
  ];
  let PrimaryKey = [ "Value" ];
  let PrimaryKeyName = "lookupLullabyOpcodeByValue";
}
def lookupLullabyOpcodeByName : SearchIndex {
  let Table = LullabyOpcodesList;
  let Key = [ "Name" ];
}

def OPC_LOAD      : LullabyOpcode<"LOAD",      0b0000011>;
def OPC_MISC_MEM  : LullabyOpcode<"MISC_MEM",  0b0001111>;
def OPC_OP_IMM    : LullabyOpcode<"OP_IMM",    0b0010011>;
def OPC_AUIPC     : LullabyOpcode<"AUIPC",     0b0010111>;
def OPC_OP_IMM_32 : LullabyOpcode<"OP_IMM_32", 0b0011011>;
def OPC_STORE     : LullabyOpcode<"STORE",     0b0100011>;

// This opcode will be used as intrinsic in the future !!!
// TODO: add intrinsics.
def OPC_CUSTOM_1  : LullabyOpcode<"CUSTOM_1",  0b0101011>;

def OPC_OP        : LullabyOpcode<"OP",        0b0110011>;
def OPC_LUI       : LullabyOpcode<"LUI",       0b0110111>;
def OPC_OP_32     : LullabyOpcode<"OP_32",     0b0111011>;
def OPC_BRANCH    : LullabyOpcode<"BRANCH",    0b1100011>;
def OPC_JALR      : LullabyOpcode<"JALR",      0b1100111>;
def OPC_JAL       : LullabyOpcode<"JAL",       0b1101111>;

// TODO: check if this one is really needed? 
def OPC_SYSTEM    : LullabyOpcode<"SYSTEM",    0b1110011>;

class LullabyInstCommon<dag outs, dag ins, string opcodestr, string argstr,
                   list<dag> pattern, InstFormat format> : Instruction {
  let Namespace = "Lullaby";

  dag OutOperandList = outs;
  dag InOperandList = ins;
  let AsmString = opcodestr # !if(!empty(argstr), "", "\t" # argstr);
  let Pattern = pattern;

  let TSFlags{4-0} = format.Value;
}

class LullabyInst<dag outs, dag ins, string opcodestr, string argstr,
             list<dag> pattern, InstFormat format>
    : LullabyInstCommon<outs, ins, opcodestr, argstr, pattern, format> {
  field bits<32> Inst;

  let Size = 4;
}

// Pseudo instructions
class Pseudo<dag outs, dag ins, list<dag> pattern, string opcodestr = "", string argstr = "">
    : LullabyInst<outs, ins, opcodestr, argstr, pattern, InstFormatPseudo> {
  let isPseudo = 1;
  let isCodeGenOnly = 1;
}

// Pseudo load instructions.
class PseudoLoad<string opcodestr>
    : Pseudo<(outs GPR:$rd), (ins bare_symbol:$addr), [], opcodestr, "$rd, $addr"> {
  let hasSideEffects = 0;
  let mayLoad = 1;
  let mayStore = 0;
  let isCodeGenOnly = 0;
  let isAsmParserOnly = 1;
}

// Pseudo store instructions.
class PseudoStore<string opcodestr, RegisterClass rsty = GPR>
    : Pseudo<(outs GPR:$tmp), (ins rsty:$rs, bare_symbol:$addr), [], opcodestr, "$rs, $addr, $tmp"> {
  let hasSideEffects = 0;
  let mayLoad = 0;
  let mayStore = 1;
  let isCodeGenOnly = 0;
  let isAsmParserOnly = 1;
}

class LullabyInstR<bits<7> funct7, bits<3> funct3, LullabyOpcode opcode, dag outs,
              dag ins, string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatR> {

  bits<5> rs2;
  bits<5> rs1;
  bits<5> rd;

  let Inst{31-25} = funct7;
  let Inst{24-20} = rs2;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-7} = rd;
  let Inst{6-0} = opcode.Value;
}

class LullabyInstI<bits<3> funct3, LullabyOpcode opcode, dag outs, dag ins,
                  string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatI> {

  bits<5> rs1;
  bits<5> rd;
  bits<12> imm12;

  let Inst{31-20} = imm12;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-7} = rd;
  let Inst{6-0} = opcode.Value;
}

class LullabyInstIShift<bits<5> imm11_7, bits<3> funct3, LullabyOpcode opcode,
                   dag outs, dag ins, string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatI> {
  bits<6> shamt;

  let Inst{31-27} = imm11_7;
  let Inst{26} = 0;
  let Inst{25-20} = shamt;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-7} = rd;
  let Opcode = opcode.Value;
}

class RVInstIShiftW<bits<7> imm11_5, bits<3> funct3, RISCVOpcode opcode,
                    dag outs, dag ins, string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatI> {
  bits<5> shamt;

  let Inst{31-25} = imm11_5;
  let Inst{24-20} = shamt;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-7} = rd;
  let Opcode = opcode.Value;
}

class LullabyInstS<bits<3> funct3, LullabyOpcode opcode, dag outs, dag ins,
              string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatS> {
  bits<12> imm12;
  bits<5> rs2;
  bits<5> rs1;

  let Inst{31-25} = imm12{11-5};
  let Inst{24-20} = rs2;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-7} = imm12{4-0};
  let Inst{6-0} = opcode.Value;
}

class LullabyInstB<bits<3> funct3, LullabyOpcode opcode, dag outs, dag ins,
              string opcodestr, string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatB> {
  bits<12> imm12;
  bits<5> rs2;
  bits<5> rs1;

  let Inst{31} = imm12{11};
  let Inst{30-25} = imm12{9-4};
  let Inst{24-20} = rs2;
  let Inst{19-15} = rs1;
  let Inst{14-12} = funct3;
  let Inst{11-8} = imm12{3-0};
  let Inst{7} = imm12{10};
  let Inst{6-0} = opcode.Value;
}

class LullabyInstU<LullabyOpcode opcode, dag outs, dag ins, string opcodestr,
              string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatU> {
  bits<20> imm20;
  bits<5> rd;

  let Inst{31-12} = imm20;
  let Inst{11-7} = rd;
  let Inst{6-0} = opcode.Value;
}

class LullabyInstJ<LullabyOpcode opcode, dag outs, dag ins, string opcodestr,
              string argstr>
    : LullabyInst<outs, ins, opcodestr, argstr, [], InstFormatJ> {
  bits<20> imm20;
  bits<5> rd;

  let Inst{31} = imm20{19};
  let Inst{30-21} = imm20{9-0};
  let Inst{20} = imm20{10};
  let Inst{19-12} = imm20{18-11};
  let Inst{11-7} = rd;
  let Inst{6-0} = opcode.Value;
}
